name: foodgram-workflow

on: [push]

jobs:
#  test-backend:
#    name: Run tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#
#      - name: Install dependencies
#        run: |
#          cd backend
#          python -m pip install --upgrade pip
#          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
#          pip install -r requirements.txt
#
#      - name: Test with flake8 and django tests
#        run: |
#          python -m flake8
#          cd backend
#          touch .env
#          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
#          echo DEBUG=${{ secrets.DEBUG }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
#          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
#          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#          cd foodgram
#          python -m pytest
#
#  build_and_push:
#    name: Push Docker image to Docker Hub
#    runs-on: ubuntu-latest
#    needs: test-backend
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to Docker
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and push backend
#        uses: docker/build-push-action@v2
#        with:
#          context: ./backend/
#          file: ./backend/Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
#
#      - name: Build and push frontend
#        uses: docker/build-push-action@v2
#        with:
#          context: ./frontend/
#          file: ./frontend/Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest

  deploy:
    name: Deploy image on server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
#    needs: build_and_push
    steps:
      - name: executing remote ssh commands to deploy
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm srsamoylenko_web_1
            sudo docker-compose rm srsamoylenko_frontend_1
            sudo killall nginx
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            sudo docker-compose up -d

  send_message:
    name: send result of deploy message to telegram
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен !